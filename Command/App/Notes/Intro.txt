Управление программными проектами. Введение.

Создаём консольный проект:
Выбираем раздельное сохранение проекта и приложения(решение).
В решение добавляем проект - MS Test
Платформа проекта должна совпадать с платформой предыдущего проекта.

Управление проектами - наука, которая изучает методы управления:
  - управление ресурсами (в т.ч. логистика, HR-HumanResources, бюджет)
  - управление временем (time-management)
  - управление качеством (в т.ч. QA - quality assurance - гарантия качества)
  - управление знаниями (повторение проекта)

Цель проекта:
Сделать все так, чтобы следующие подобные проекты разрабатывать было легче.
То есть получить определённые знания.

Качественный программист, на что обращают внимание:
1. Оформление github и репозиторий:
   - нормальное имя
   - нормальная аватарка
   - добавление readme/лицензии в репозиторий
2. Тестирование в проекте:
   - отдельный проект для тестирования
3. Стиль кода:
   - придерживаться одному стилю
4. Комментарии кода

Схемы управления проектами:
Разделяют два типа схем:
  1. Каскадные (водопадные) модели управления
  2. Итеративные (водовородные) модели управления

1. Каскадные схемы - состоят с многих этапов, каждый из которых имеет своё место в последовательности работ.
Некоторые выполняются паралельно, некоторые последовательно.
Вся последовательность работ часто изображается диаграммой Ганта:
    ---------- время ------------------------------------------>
    формирование ТЗ    Разработка дизайна
    -----------------  -------------------
                       Структура БД     ORM/API
                      --------------   ---------
                                        Испытание дизайна
                                        ---------
                                      Программирование
                                      -------------------------

2. Итеративные схемы - состоят из небольшого кол-ва этапов/действий, которые постоянно
повторяются, увеличивая собственный масштаб, но в течении непродолжительнного времени(от недели до месяца).
ПВПД - Планируй-Выполняй-Проверяй-Действуй

SCRUM - один из методов управления за итеративной схемой.
Предписывает командам разбивать работу на цели, которые должны быть выполнены в течение 
ограниченных по времени итераций, называемых спринтами.

Спринт - итерация, комплекс заданий, которые составляют некоторою целостность.
Скрам-доска - способ управления(мониторинг, и т.д.) спринтом.
Карточка - задания(в спринте), которые тоже может складываться из пунктов(задач)

Работа со скрам-доской (в GitHub):
  1. Создаём репозиторий
  2. Добавляем Collaborators
  3. Создаём проект(спринт)
  4. Создаём MileStones(временной рубеж) в: репозиторий -> Issues -> Milestones
  5. Создаём карточку, описание задач и добавляем MileStone

Collaborators - это люди, которые имеют права для совместной работы(collaboration) над репозиторием в рамках данного проект.

--------------------------------------------------------------------------

Совместная работа с проектом. На примере репозитория GitHub.
Исходная ситуация: несколько участников проекта вносят в него изменения(работают над ним) и передают изменения в репозиторий.
Имитируем эту работу путем внесения изменений:
  а) из VS
  б) средствами GitHub

Схема 1:
  1. В VS изменяем файл, и не делаем комит.
  2. В GitHub меняем другой файл и делаем комит.
  3. Возвращаемся в VS, делаем комит и Push.
  4. Появляется сообщение, что пуш невозможен, поскольку удаленный репозиторий более новый, чем локальный (из-за комита в GitHub на пункте 2).
  5. Уведомление предлагает "Pull then Push" --> автоматически обновить локальный репозиторий и потому добавить свои изменения.
  6. После их принятия делается дополнительный 'git merge' который соединяет комиты, сделанных из разных мест(VS и GitHub).

Схема 2:
  1. В VS изменяем файл, и не делаем комит.
  2. В GitHub меняем тот же самый файл и делаем комит.
  3. Возвращаемся в VS, делаем комит и Push.
  4. Появляется сообщение, что пуш невозможен, поскольку удаленный репозиторий более новый, чем локальный (из-за комита в GitHub на пункте 2).
  5. Уведомление предлагает "Pull then Push" --> автоматически обновить локальный репозиторий и потому добавить свои изменения.
  6! Изменения не соединяются, поскольку противоречят одна другой, поэтому открывается вкладка с отличиями и предлагается запуск инструмента "слития".
  7. Запускаем этот инструмент, он состоит из 3 частей:
       - состояние отдалённого(remote) документа
       - состояние поточного(local) документа
       - результирующие состояние
       Редактируем результирующие состояния путем выбора одного или двух вариантов.
  8. Принимаем и фиксируем изменения(слитие) - "Accept Merge".
  9. Даём название комиту и делаем Push.

Небезопасные моменты:
  - автоматично принять удалённый комит - отменяются все локальные наработки
  - автоматично принять локальную версию - отменяются наработки других

Выводы:
  - командную работу следует разделять так, чтобы не было работы с одними файлами
  - слияние веток(branches) следует доверять менеджеру проекта
