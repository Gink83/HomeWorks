Модульное тестирование.

Тестирование частей проекта(модулей) на работаспособность путём их выполнения на множество тестовых данных.

Тесты чаще всего оформляются как отдельный проект, для связи с основным проектом следует добавить зависимости:
  1. ПКМ по папке Dependencies.
  2. Add Project Reference.
  3. Добавляем приложение для тестирования.

TDD (Test Driven Development - Разработка через тестирование) - подход к проектированию,
при котором тесты предшествуют коду, т.е. сначала создаются тесты, а потом код, который эти
тесты должен пройти. Тесты можно понимать как максимально уточнённое ТЗ.

Например:                       "Hello..."
Ellipsis("Hello, World!", 5) <-
                                "He..."

Тестовый проект "отзеркаливает" основной проект, его классы наз. от имени классов проекта,
добавляя "Test", также само и наз. методов.

Основу тестов составляют утверждения (Asserts).
Тест является пройденными, если все утверждения выполняются.
Тест проваливается, если хотя бы одно не выполняется.

Покрытие теста (покрытие кода, coverage).
Показатель (как правило в процентах), который характеризует часть (долю) кода, который берёт участие в тестах.
Существует несколько способов вычисления покрытий:
  1. по строкам кода (кол-во строк в тесте / кол-во строк в коде)
     [устарелый, не используется]
  2. по классам (за модулями), кол-во классов, которые берут участие в тестировании / общее кол-во классов
     [почти не используется, но входит к результатам]
  3. по методам (за ф-циям)
     [в результате представляется отчет: 83% методов в 81% классов]
  4. по операторам / операциям
     = инструкция - синтаксично коректная целостная (атомарная) условие языка программирования
       x += 10;  (часто заканчивается спец. символом - ';')
       if (x < 10) Hello();
     = оператор - инструкция, которая не имеет результата
       if (x < 10) Hello();
     = операция - инструкция, которая имеет результат, может быть присвоена переменной
       x = (операция)
       x = x > 10 ? 2 : -2
  5. покрытие шагов - по процентам возможных "шагов" прохождения условных операторов
     (всех блоков if и else)
  6. покрытие входов - по процентам возможных входных данных (в параметр метода).
